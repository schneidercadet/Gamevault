rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isParticipant(participants) {
      return isAuthenticated() && (request.auth.uid in participants);
    }

    // Default rule - deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // User Settings
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }

    // User Profiles
    match /userProfiles/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // Friends subcollection
      match /friends/{friendId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }
    }

    // Friend Requests
    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() &&
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.senderId;
      allow update, delete: if isAuthenticated() &&
        (request.auth.uid == resource.data.senderId || 
         request.auth.uid == resource.data.receiverId);
    }

    // Activity Feed
    match /activity/{activityId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        request.auth.uid in resource.data.visibleTo ||
        (exists(/databases/$(database)/documents/userProfiles/$(request.auth.uid)/friends/$(resource.data.userId)))
      );
      allow create: if isAuthenticated() && 
        request.auth.uid == request.resource.data.userId;
      allow update, delete: if isAuthenticated() &&
        request.auth.uid == resource.data.userId;
    }

    // Messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
      allow create: if isAuthenticated() && 
        (request.auth.uid in request.resource.data.participants) &&
        request.auth.uid == request.resource.data.senderId;
      allow update: if isAuthenticated() &&
        (request.auth.uid in resource.data.participants) &&
        (request.auth.uid == resource.data.senderId ||
         request.auth.uid == resource.data.receiverId);
      allow delete: if isAuthenticated() &&
        request.auth.uid == resource.data.senderId;
    }

    // Channels collection
    match /channels/{channelId} {
      allow read, write: if request.auth != null;

      // Messages subcollection
      match /messages/{messageId} {
        allow read: if request.auth != null;
        allow create: if request.auth != null && request.resource.data.senderId == request.auth.uid;
        allow update, delete: if request.auth != null && resource.data.senderId == request.auth.uid;
      }
    }

    // Typing collection
    match /typing/{docId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
        request.resource.data.userId == request.auth.uid;
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }
  }
}
